{"version":3,"file":"static/js/264.fc34c86d.chunk.js","mappings":"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","sources":["apis/article.js","hooks/useChannel.js","pages/Article/index.js"],"sourcesContent":["// 封装和文章相关的接口函数\n\nimport { request } from \"@/utils\"\n\n// 1. 获取频道列表\nexport function getChannelAPI () {\n  return request({\n    url: '/channels',\n    method: 'GET'\n  })\n}\n\n// 2. 提交文章表单\n\nexport function createArticleAPI (data) {\n  return request({\n    url: '/mp/articles?draft=false',\n    method: 'POST',\n    data\n  })\n}\n\n// 更新文章表单\n\nexport function updateArticleAPI (data) {\n  return request({\n    url: `/mp/articles/${data.id}?draft=false`,\n    method: 'PUT',\n    data\n  })\n}\n\n\n// 获取文章列表\n\nexport function getArticleListAPI (params) {\n  return request({\n    url: \"/mp/articles\",\n    method: 'GET',\n    params\n  })\n}\n\n\n// 删除文章\n\nexport function delArticleAPI (id) {\n  return request({\n    url: `/mp/articles/${id}`,\n    method: 'DELETE'\n  })\n}\n\n\n// 获取文章详情\n\nexport function getArticleById (id) {\n  return request({\n    url: `/mp/articles/${id}`\n  })\n}\n\n","// 封装获取频道列表的逻辑\nimport { useState, useEffect } from 'react'\nimport { getChannelAPI } from '@/apis/article'\nfunction useChannel () {\n  // 1. 获取频道列表所有的逻辑\n  // 获取频道列表\n  const [channelList, setChannelList] = useState([])\n\n  useEffect(() => {\n    // 1. 封装函数 在函数体内调用接口\n    const getChannelList = async () => {\n      const res = await getChannelAPI()\n      setChannelList(res.data.channels)\n    }\n    // 2. 调用函数\n    getChannelList()\n  }, [])\n  // 2. 把组件中要用到的数据return出去\n  return {\n    channelList\n  }\n}\n\nexport { useChannel }","import { Link, useNavigate } from 'react-router-dom'\nimport { Card, Breadcrumb, Form, Button, Radio, DatePicker, Select, Popconfirm } from 'antd'\n// 引入汉化包 时间选择器显示中文\nimport locale from 'antd/es/date-picker/locale/zh_CN'\n\n// 导入资源\nimport { Table, Tag, Space } from 'antd'\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons'\nimport img404 from '@/assets/error.png'\nimport { useChannel } from '@/hooks/useChannel'\nimport { useEffect, useState } from 'react'\nimport { delArticleAPI, getArticleListAPI } from '@/apis/article'\n\nconst { Option } = Select\nconst { RangePicker } = DatePicker\n\nconst Article = () => {\n  const navigate = useNavigate()\n  const { channelList } = useChannel()\n  // 准备列数据\n  // 定义状态枚举\n  const status = {\n    1: <Tag color='warning'>待审核</Tag>,\n    2: <Tag color='success'>审核通过</Tag>,\n  }\n  const columns = [\n    {\n      title: '封面',\n      dataIndex: 'cover',\n      width: 120,\n      render: cover => {\n        return <img src={cover.images[0] || img404} width={80} height={60} alt=\"\" />\n      }\n    },\n    {\n      title: '标题',\n      dataIndex: 'title',\n      width: 220\n    },\n    {\n      title: '状态',\n      dataIndex: 'status',\n      // data - 后端返回的状态status 根据它做条件渲染\n      // data === 1 => 待审核\n      // data === 2 => 审核通过\n      render: data => status[data]\n    },\n    {\n      title: '发布时间',\n      dataIndex: 'pubdate'\n    },\n    {\n      title: '阅读数',\n      dataIndex: 'read_count'\n    },\n    {\n      title: '评论数',\n      dataIndex: 'comment_count'\n    },\n    {\n      title: '点赞数',\n      dataIndex: 'like_count'\n    },\n    {\n      title: '操作',\n      render: data => {\n        return (\n          <Space size=\"middle\">\n            <Button type=\"primary\" shape=\"circle\" icon={<EditOutlined />} onClick={() => navigate(`/publish?id=${data.id}`)} />\n            <Popconfirm\n              title=\"删除文章\"\n              description=\"确认要删除当前文章吗?\"\n              onConfirm={() => onConfirm(data)}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                type=\"primary\"\n                danger\n                shape=\"circle\"\n                icon={<DeleteOutlined />}\n              />\n            </Popconfirm>\n          </Space>\n        )\n      }\n    }\n  ]\n\n  // 筛选功能\n  // 1. 准备参数\n  const [reqData, setReqData] = useState({\n    status: '',\n    channel_id: '',\n    begin_pubdate: '',\n    end_pubdate: '',\n    page: 1,\n    per_page: 4\n  })\n\n  // 获取文章列表\n  const [list, setList] = useState([])\n  const [count, setCount] = useState(0)\n  useEffect(() => {\n    async function getList () {\n      const res = await getArticleListAPI(reqData)\n      setList(res.data.results)\n      setCount(res.data.total_count)\n    }\n    getList()\n  }, [reqData])\n\n\n  // 2. 获取筛选数据\n  const onFinish = (formValue) => {\n    console.log(formValue)\n    // 3. 把表单收集到数据放到参数中(不可变的方式)\n    setReqData({\n      ...reqData,\n      channel_id: formValue.channel_id,\n      status: formValue.status,\n      begin_pubdate: formValue.date[0].format('YYYY-MM-DD'),\n      end_pubdate: formValue.date[1].format('YYYY-MM-DD')\n    })\n    // 4. 重新拉取文章列表 + 渲染table逻辑重复的 - 复用\n    // reqData依赖项发生变化 重复执行副作用函数 \n  }\n\n  // 分页\n  const onPageChange = (page) => {\n    console.log(page)\n    // 修改参数依赖项 引发数据的重新获取列表渲染\n    setReqData({\n      ...reqData,\n      page\n    })\n  }\n\n  // 删除\n  const onConfirm = async (data) => {\n    console.log('删除点击了', data)\n    await delArticleAPI(data.id)\n    setReqData({\n      ...reqData\n    })\n  }\n\n  return (\n    <div>\n      <Card\n        title={\n          <Breadcrumb items={[\n            { title: <Link to={'/'}>首页</Link> },\n            { title: '文章列表' },\n          ]} />\n        }\n        style={{ marginBottom: 20 }}\n      >\n        <Form initialValues={{ status: '' }} onFinish={onFinish}>\n          <Form.Item label=\"状态\" name=\"status\">\n            <Radio.Group>\n              <Radio value={''}>全部</Radio>\n              <Radio value={1}>待审核</Radio>\n              <Radio value={2}>审核通过</Radio>\n            </Radio.Group>\n          </Form.Item>\n\n          <Form.Item label=\"频道\" name=\"channel_id\">\n            <Select\n              placeholder=\"请选择文章频道\"\n              style={{ width: 120 }}\n            >\n              {channelList.map(item => <Option key={item.id} value={item.id}>{item.name}</Option>)}\n            </Select>\n          </Form.Item>\n\n          <Form.Item label=\"日期\" name=\"date\">\n            {/* 传入locale属性 控制中文显示*/}\n            <RangePicker locale={locale}></RangePicker>\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" style={{ marginLeft: 40 }}>\n              筛选\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n      {/* 表格区域 */}\n      <Card title={`根据筛选条件共查询到 ${count} 条结果：`}>\n        <Table rowKey=\"id\" columns={columns} dataSource={list} pagination={{\n          total: count,\n          pageSize: reqData.per_page,\n          onChange: onPageChange\n        }} />\n      </Card>\n    </div>\n  )\n}\n\nexport default Article"],"names":["getChannelAPI","request","url","method","createArticleAPI","data","updateArticleAPI","concat","id","getArticleListAPI","params","delArticleAPI","getArticleById","useChannel","_useState","useState","_useState2","_slicedToArray","channelList","setChannelList","useEffect","getChannelList","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","sent","channels","stop","apply","arguments","Option","Select","RangePicker","DatePicker","navigate","useNavigate","status","_jsx","Tag","color","children","columns","title","dataIndex","width","render","cover","src","images","height","alt","_jsxs","Space","size","Button","type","shape","icon","EditOutlined","onClick","Popconfirm","description","onConfirm","okText","cancelText","danger","DeleteOutlined","channel_id","begin_pubdate","end_pubdate","page","per_page","reqData","setReqData","_useState3","_useState4","list","setList","_useState5","_useState6","count","setCount","_getList","results","total_count","getList","_callee2","_context2","console","log","_objectSpread","_x","Card","Breadcrumb","items","Link","to","style","marginBottom","Form","initialValues","onFinish","formValue","date","format","Item","label","name","Radio","value","placeholder","map","item","locale","htmlType","marginLeft","Table","rowKey","dataSource","pagination","total","pageSize","onChange"],"sourceRoot":""}